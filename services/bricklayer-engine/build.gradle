plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$dependencyManagementVersion"
}

group = "$packageGroup"
version = "$projectVersion"

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("$projectJavaVersion"))
    }
}

repositories {
    gradlePluginPortal()
    mavenCentral()
}

dependencies {
    //Main
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    //Cloud
    implementation("org.springframework.cloud:spring-cloud-starter")
    //Swagger
    implementation "io.swagger.core.v3:swagger-annotations:$swaggerAnnotationsVersion"
    // Metric
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")
    //Utils
    implementation("org.apache.commons:commons-lang3")
    compileOnly("org.projectlombok:lombok")
    //Annotations
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")
    //Tests
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-testcontainers")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("org.testcontainers:junit-jupiter")
    testCompileOnly ("org.projectlombok:lombok")
    testAnnotationProcessor ("org.projectlombok:lombok")
}

bootJar {
    archiveFileName = project.name + '.jar'
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}
